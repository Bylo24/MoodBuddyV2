import React, { useState, useEffect } from 'react';
import { 
  StyleSheet, 
  Text, 
  View, 
  TextInput, 
  TouchableOpacity, 
  ActivityIndicator, 
  KeyboardAvoidingView, 
  Platform,
  ScrollView,
  Alert,
  Keyboard
} from 'react-native';
import { theme } from '../theme/theme';
import { signInWithEmail, signUpWithEmail, resetPassword, resendConfirmationEmail } from '../services/authService';
import { Ionicons } from '@expo/vector-icons';

interface LoginScreenProps {
  onLogin: (isSignUp: boolean) => void;
}

export default function LoginScreen({ onLogin }: LoginScreenProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSignUp, setIsSignUp] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [resetMode, setResetMode] = useState(false);
  const [confirmMode, setConfirmMode] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  
  // Clear error message when form changes
  useEffect(() => {
    setErrorMessage(null);
  }, [email, password, isSignUp, resetMode, confirmMode]);
  
  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };
  
  const validatePassword = (password: string): boolean => {
    // At least 6 characters
    return password.length >= 6;
  };
  
  const handleAuth = async () => {
    Keyboard.dismiss();
    setErrorMessage(null);
    
    // Validate inputs
    if (!email) {
      setErrorMessage('Please enter your email address');
      return;
    }
    
    if (!validateEmail(email)) {
      setErrorMessage('Please enter a valid email address');
      return;
    }
    
    if (!password) {
      setErrorMessage('Please enter your password');
      return;
    }
    
    if (isSignUp && !validatePassword(password)) {
      setErrorMessage('Password must be at least 6 characters long');
      return;
    }
    
    setIsLoading(true);
    
    try {
      if (isSignUp) {
        console.log('Starting sign up process...');
        const result = await signUpWithEmail(email, password);
        console.log('Sign up result:', result);
        
        // If we have a session, login was successful
        if (result.session) {
          console.log('Sign up successful with session, proceeding to app');
          onLogin(true); // Pass true to indicate this is a sign up
        } else if (result.user) {
          // If user was created but email confirmation is required
          setConfirmMode(true);
          Alert.alert(
            'Email Confirmation Required',
            'Your account has been created. Please check your email for confirmation instructions.',
            [{ text: 'OK' }]
          );
        } else {
          setErrorMessage('Failed to create account. Please try again.');
        }
      } else {
        console.log('Starting sign in process...');
        await signInWithEmail(email, password);
        console.log('Sign in successful, proceeding to app');
        onLogin(false); // Pass false to indicate this is a login, not a sign up
      }
    } catch (error: any) {
      console.error('Auth error:', error);
      
      // Handle specific error messages
      if (error.message?.includes('User already registered')) {
        setErrorMessage('An account with this email already exists. Please log in instead.');
        setIsSignUp(false);
      } else if (error.message?.includes('Invalid login credentials')) {
        setErrorMessage('Invalid email or password. Please try again.');
      } else if (error.message?.includes('Email confirmation required') || error.name === 'EmailConfirmationRequired') {
        setConfirmMode(true);
        setErrorMessage('Please confirm your email address before logging in.');
      } else if (error.message?.includes('Email not confirmed')) {
        setConfirmMode(true);
        setErrorMessage('Please confirm your email address before logging in.');
      } else if (error.message?.includes('network') || error.message?.includes('timeout') || error.message?.includes('abort')) {
        setErrorMessage('Network error. Please check your connection and try again.');
      } else {
        setErrorMessage(error.message || 'Authentication failed. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };
  
  // Rest of the component remains the same...
}