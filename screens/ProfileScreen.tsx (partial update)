import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, Alert, ActivityIndicator, ScrollView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { theme } from '../theme/theme';
import { getCurrentUser, signOut } from '../services/authService';
import { getMoodStreak, getAverageMood } from '../services/moodService';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { supabase } from '../utils/supabaseClient';

interface ProfileScreenProps {
  onClose: () => void;
  onLogout: () => void;
}

export default function ProfileScreen({ onClose, onLogout }: ProfileScreenProps) {
  // Existing state variables...
  
  // New direct sign out function that bypasses the existing flow
  const handleDirectSignOut = async () => {
    try {
      setIsSigningOut(true);
      
      // First close the modal
      onClose();
      
      // Clear AsyncStorage
      await AsyncStorage.clear();
      console.log('AsyncStorage cleared');
      
      // Sign out from Supabase directly
      await supabase.auth.signOut();
      console.log('Signed out from Supabase');
      
      // Force reload the app by calling onLogout
      setTimeout(() => {
        console.log('Calling onLogout callback');
        onLogout();
      }, 500);
    } catch (error) {
      console.error('Error in direct sign out:', error);
      Alert.alert('Error', 'Failed to sign out. Please try again.');
    }
  };
  
  // Add this at the end of your JSX, after all other buttons
  return (
    <View style={styles.container}>
      {/* Existing content... */}
      
      {/* Add this at the bottom of your ScrollView, after the regular sign out button */}
      <TouchableOpacity 
        style={[styles.signOutButton, { marginTop: 16, backgroundColor: theme.colors.error }]}
        onPress={handleDirectSignOut}
      >
        <Text style={[styles.signOutText, { color: 'white' }]}>Emergency Sign Out</Text>
      </TouchableOpacity>
    </View>
  );
}