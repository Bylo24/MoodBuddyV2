import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, ScrollView, Dimensions, SafeAreaView, StatusBar, AppState, ActivityIndicator, Alert } from 'react-native';
import { theme } from '../theme/theme';
import MoodSlider from '../components/MoodSlider';
import ActivityCard from '../components/ActivityCard';
import MoodTrendGraph from '../components/MoodTrendGraph';
import QuoteComponent from '../components/QuoteComponent';
import Header from '../components/Header';
import ProfileModal from '../components/ProfileModal';
import { MoodRating } from '../types';
import { getTodayMoodEntry, getRecentMoodEntries, getMoodStreak, getWeeklyAverageMood, getCurrentWeekMoodEntries } from '../services/moodService';
import { getCurrentUser, isAuthenticated } from '../services/authService';
import { recommendedActivities } from '../data/mockData';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Get screen dimensions
const { width: screenWidth } = Dimensions.get('window');

interface HomeScreenProps {
  onLogout: () => void;
  userName?: string; // Add optional userName prop
}

export default function HomeScreen({ onLogout, userName: propUserName }: HomeScreenProps) {
  // State for selected mood (just for UI demonstration)
  const [selectedMood, setSelectedMood] = useState<MoodRating>(3);
  const [userName, setUserName] = useState<string>(propUserName || 'Friend');
  const [isLoading, setIsLoading] = useState(true);
  const [streak, setStreak] = useState(0);
  const [weeklyAverage, setWeeklyAverage] = useState<number | null>(null);
  const [weeklyMoodEntries, setWeeklyMoodEntries] = useState<any[]>([]);
  const [todayMood, setTodayMood] = useState<MoodRating | null>(null);
  const [isSliderDisabled, setIsSliderDisabled] = useState(false);
  
  // State for mood trend graph refresh
  const [trendGraphKey, setTrendGraphKey] = useState(0);
  
  // State for profile modal
  const [profileModalVisible, setProfileModalVisible] = useState(false);
  
  // State to force quote refresh
  const [quoteKey, setQuoteKey] = useState(Date.now());
  
  // Debug function to show all stored values
  const debugStoredValues = async () => {
    try {
      const keys = await AsyncStorage.getAllKeys();
      const result = await AsyncStorage.multiGet(keys);
      console.log('All stored values:', result);
      
      // Specifically check user_display_name
      const name = await AsyncStorage.getItem('user_display_name');
      console.log('Stored user_display_name:', name);
      
      if (name) {
        // Update the name if it exists
        setUserName(name);
      }
    } catch (error) {
      console.error('Error debugging stored values:', error);
    }
  };
  
  // Load user data and mood information
  useEffect(() => {
    const loadUserData = async () => {
      setIsLoading(true);
      try {
        // Debug stored values
        await debugStoredValues();
        
        const isLoggedIn = await isAuthenticated();
        if (!isLoggedIn) {
          // Handle not authenticated state
          console.log('User not authenticated');
          onLogout();
          setIsLoading(false);
          return;
        }
        
        // Try to get stored display name first
        const storedName = await AsyncStorage.getItem('user_display_name');
        console.log('Retrieved stored name:', storedName);
        
        if (storedName) {
          console.log('Setting user name from storage:', storedName);
          setUserName(storedName);
        } else if (propUserName) {
          console.log('Setting user name from props:', propUserName);
          setUserName(propUserName);
          
          // Save the prop name for future use
          try {
            await AsyncStorage.setItem('user_display_name', propUserName);
            console.log('Saved name from props:', propUserName);
          } catch (error) {
            console.error('Error saving name from props:', error);
          }
        } else {
          // Fall back to email-based name
          const user = await getCurrentUser();
          if (user?.email) {
            const emailName = user.email.split('@')[0];
            console.log('Setting user name from email:', emailName);
            setUserName(emailName);
            
            // Save this name for future use
            try {
              await AsyncStorage.setItem('user_display_name', emailName);
              console.log('Saved default name from email:', emailName);
            } catch (error) {
              console.error('Error saving default user name:', error);
            }
          }
        }
        
        // Load mood data
        await refreshMoodData();
      } catch (error) {
        console.error('Error loading user data:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadUserData();
  }, [propUserName]);
  
  // Rest of the HomeScreen component remains the same...
  
  // Update the greeting section to clearly show the user name
  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="light-content" backgroundColor={theme.colors.background} />
      
      <Header onProfilePress={handleProfilePress} />
      
      <ScrollView 
        style={styles.container} 
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.header}>
          <Text style={styles.greeting}>Hey {userName},</Text>
          <Text style={styles.subGreeting}>let's make today great! âœ¨</Text>
          <Text style={styles.date}>{new Date().toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric' })}</Text>
        </View>
        
        {/* Rest of the component remains the same... */}